/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT

    jump_layer{
      bindings = <
        &none         &none          &none          &none       &none     &none                         &none         &none         &none         &none         &none       &none
        &none         &none          &none          &none       &none     &none                         &none         &none         &none         &none         &none       &none
        &none         &none          &none          &none       &none     &none          &none          &none         &none         &none         &none         &none       &none
                                                       &trans          &trans          &trans   &trans    &trans       &trans         &trans         &trans
      >;
    };
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define SHIFT 1
#define NAV 2
#define NUM 3
#define FUNC 4
#define QWERTY 5
#define MOUSE 6

#define U_MOUSE_MOVE_MAX 2700                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
	time-to-max-speed-ms = <500>;             /* <--- How long time until max speed is reached (default: 500) */
};

#define U_MOUSE_SCROLL_MAX 100                    /* <--- New max speed setting (default: 10) */

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)



&mwh {
  time-to-max-speed-ms = <500>;                 /* <--- How long time until max speed is reached */
};

&mt {
    tapping-term-ms = <200>;
};

/ {
    macros {
        zed_em_kay: zed_em_kay {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&kp LPAR>
                , <&kp RPAR &kp LBRC>
                , <&kp RBRC>
                ;
        };
    };
  behaviors {
         td0: tap_dance {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_0";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp SEMI>, <&kp LS(SEMI)>;
                };
         td1: tap_dancee {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_1";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp EQUAL>, <&kp PLUS>;
                };
         td2: tap_dancee2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_2";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LPAR>, <&kp RPAR>;
                };
         td3: tap_dancee3 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_3";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp F8>, <&kp LC(N1)>;
                };
         td4: tap_dancee4 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_4";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp F12>, <&kp Q>;
                };
         td5: tap_dancee5 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_5";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LBRC>, <&kp RBRC>;
                };
         td6: tap_dancee6 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_6";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LBKT>, <&kp RBKT>;
                };
         td7: tap_dancee7 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_7";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LG(LA(LC(LS(N7))))>, <&kp LG(LA(LC(LS(N8))))>,<&kp LG(LA(LC(LS(N9))))>;
                };
    };
  keymap {
          compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &lt FUNC ESC       &kp SQT      &kp COMMA  &kp DOT   &kp P         &kp Y                                          &kp F      &kp G     &kp C     &kp R      &kp L   &kp FSLH  
        &to SHIFT          &kp A        &kp O      &kp E     &kp U         &kp I                                          &kp D      &kp H     &kp T     &kp N      &kp S   &kp MINUS 
        &kp LALT           &kp SEMI     &kp Q      &kp J     &kp K         &kp X        &kp C_PLAY_PAUSE                  &kp B      &kp M     &kp W     &kp V      &kp Z   &kp RET  
                                                   &mo MOUSE &mt LGUI GRAVE &kp SPACE &lt NAV RET     &kp BACKSPACE     &mt LSHFT LS(RET) &mt LCTRL TAB  &key_repeat 
      >;
      sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
    };

    shift_layer {
      bindings = <
        &trans      &kp LS(SQT)      &kp LS(COMMA)  &kp LS(DOT)   &kp LS(P)         &kp LS(Y)                               &kp LS(F)      &kp LS(G)     &kp LS(C)     &kp LS(R)      &kp LS(L)          &kp LS(FSLH)  
        &to DEFAULT &kp LS(A)        &kp LS(O)      &kp LS(E)     &kp LS(U)         &kp LS(I)                               &kp LS(D)      &kp LS(H)     &kp LS(T)     &kp LS(N)      &kp LS(S)          &kp LS(MINUS) 
        &trans      &kp LS(SEMI)     &kp LS(Q)      &kp LS(J)     &kp LS(K)         &kp LS(X)        &to DEFAULT            &kp LS(B)      &kp LS(M)     &kp LS(W)     &kp LS(V)      &kp LS(Z)          &kp LS(RET)  
                                                    &none         &none             &kp SPACE      &kp RET   &kp LS(RET)    &trans       &trans        &trans
      >;
    };
    nav_layer {
      bindings = <
        &none         &kp LG(LA(LC(LS(F))))            &kp LG(LA(LC(LS(N2)))) &kp LALT                &kp LG(LA(LC(LS(N1))))  &none                                 &td1         &kp LEFT       &kp LC(K)      &kp RIGHT   &zed_em_kay &td4
        &none         &mt LSHFT LG(LA(LC(LS(F))))      &kp LCTRL              &mt LGUI LG(LS(J))      &lt NUM LG(LS(SPACE))   &kp LG(SPACE)                         &td0         &kp LC(H)      &kp LC(J)      &kp LC(L)   &kp UP      &none
        &none         &none                            &kp LG(LA(LC(LS(N0)))) &kp LG(LA(LC(LS(N4))))  &kp LG(LA(LC(LS(N3))))  &kp LG(TAB)       &kp LA(LC(SPACE))   &td2         &td5           &td6           &kp LS(V)   &kp DOWN    &kp LS(RET)
                                                             &none                   &none                   &none           &none       &td7     &kp RET       &kp PG_DN      &kp PG_UP
      >;
      sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
   };

    num_layer {
      bindings = <
        &none         &none           &none           &trans          &none           &none                             &kp GRAVE    &kp N7         &kp N8           &kp N9      &none           &kp BSLH
        &none         &trans          &trans          &trans          &none           &none                             &kp N0       &kp N1         &kp N2           &kp N3      &kp N4          &none
        &none         &none           &none           &none           &none           &none         &kp C_MUTE          &kp PLUS     &kp MINUS      &kp LS(MINUS)    &kp LC(V)   &none           &none
                                                      &none           &none           &none       &none     &kp N6      &kp N5       &none          &none  
       >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };

    function_layer {
      bindings = <
        &none         &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                      &none         &kp F7         &kp F8      &kp F9      &kp F10         &none
        &none         &bt BT_CLR      &none           &none           &none           &none                             &none         &kp F1         &kp F2      &kp F3      &kp F4          &none
        &bootloader   &reset          &none           &none           &none           &none              &to QWERTY     &none         &kp F11        &kp F12     &kp F13     &kp F14         &none
                                                      &none           &none           &none    &none     &kp F6        &kp F5         &kp F15      &none
      >;
    };

   qwerty_layer{
      bindings = <
        &kp ESC     &kp Q     &kp W       &kp E     &kp R           &kp T                                &kp Y     &kp U     &kp I      &kp O    &kp P     &kp BACKSPACE
        &kp TAB     &kp A     &kp S       &kp D     &kp F           &kp G                                &kp H     &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
        &kp LSHFT   &kp Z     &kp X       &kp C     &kp V           &kp B            &to DEFAULT         &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &mt RSHFT RET
                                          &none     &none           &kp SPACE   &kp SPACE    &kp SPACE   &kp SPACE &none     &none
      >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };
    mouse_layer{
      bindings = <
        &none         &none          &none          &none       &none     &none                         &none         &none          &mmv MOVE_UP   &none           &none                &none
        &none         &none          &none          &mkp RCLK   &mkp LCLK &none                         &none         &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none                &none
        &none         &none          &none          &none       &none     &none       &mkp LCLK         &none         &none          &none          &none           &none                &mkp LCLK
                                                 &none          &none     &none     &none      &none    &mkp LCLK     &mkp RCLK      &none
      >;
    };
    /* 

    mouse movement using encoder

    */
        };
};
