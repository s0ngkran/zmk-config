/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT

    jump_layer{
      bindings = <
        &none         &none          &none          &none       &none     &none                         &none         &none         &none         &none         &none       &none
        &none         &none          &none          &none       &none     &none                         &none         &none         &none         &none         &none       &none
        &none         &none          &none          &none       &none     &none          &none          &none         &none         &none         &none         &none       &none
                                                       &trans          &trans          &trans   &trans    &trans       &trans         &trans         &trans
      >;
    };
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SHIFT 1
#define NAV 2
#define NUM 3
#define FUNC 4
#define QWERTY 5
#define MOUSE 6
#define SYM 7
#define DELAY_FAST 25

#define U_MOUSE_MOVE_MAX 2700                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
	time-to-max-speed-ms = <500>;             /* <--- How long time until max speed is reached (default: 500) */
};

#define U_MOUSE_SCROLL_MAX 100                    /* <--- New max speed setting (default: 10) */

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)
#define xxx &none


&mwh {
  time-to-max-speed-ms = <500>;                 /* <--- How long time until max speed is reached */
};

&mt {
    tapping-term-ms = <150>;
};

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};


/ {
    macros {
        zed_em_kay: zed_em_kay {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&kp LPAR>
                , <&kp RPAR &kp LBRC>
                , <&kp RBRC>
                ;
        };
    };
  behaviors {
         td0: tap_dance {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_0";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp SEMI>, <&kp LS(SEMI)>;
                };
         td1: tap_dancee {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_1";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp EQUAL>, <&kp PLUS>;
                };
         td2: tap_dancee2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_2";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LPAR>, <&kp RPAR>;
                };
         td3: tap_dancee3 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_3";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp F8>, <&kp LC(N1)>;
                };
         td4: tap_dancee4 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_4";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp F12>, <&kp Q>;
                };
         td5: tap_dancee5 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_5";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LBRC>, <&kp RBRC>;
                };
         td6: tap_dancee6 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_6";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LBKT>, <&kp RBKT>;
                };
 td7: tap_dancee7 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_7";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LG(LA(LC(LS(N7))))>, <&kp LG(LA(LC(LS(N8))))>,<&kp LG(LA(LC(LS(N9))))>;
                };
         tdshiftspace: tdshiftspace {
                    compatible = "zmk,behavior-tap-dance";
                    label = "tdshiftspace";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&sk LSHFT>, <&kp SPACE>;
                                                                     
                };
    };

combos {
        compatible = "zmk,combos";
        ccplus {
            timeout-ms = <DELAY_FAST>;
            key-positions = <7 8>;
            bindings = <&kp PLUS>;
        };
        ccmulti {
            timeout-ms = <DELAY_FAST>;
            key-positions = <7 9>;
            bindings = <&kp LS(N8)>;
        };
        ccminus {
            timeout-ms = <DELAY_FAST>;
            key-positions = <9 8>;
            bindings = <&kp MINUS>;
        };
        cclsone {
            timeout-ms = <DELAY_FAST>;
            key-positions = <32 19>;
            bindings = <&kp LS(N1)>;
        };
        cclstwo {
            timeout-ms = <DELAY_FAST>;
            key-positions = <33 20>;
            bindings = <&kp LS(N2)>;
        };
        cclsthree {
            timeout-ms = <DELAY_FAST>;
            key-positions = <34 21>;
            bindings = <&kp LS(N3)>;
        };
        cclsfour {
            timeout-ms = <DELAY_FAST>;
            key-positions = <35 22>;
            bindings = <&kp LS(N4)>;
        };
        cclpar {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 20>;
            bindings = <&kp LS(N9)>;
        };
        ccequal {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 21>;
            bindings = <&kp EQUAL>;
        };
        ccrpar {
            timeout-ms = <DELAY_FAST>;
            key-positions = <20 21>;
            bindings = <&kp LS(N0)>;
        };
        ccsemi {
            timeout-ms = <DELAY_FAST>;
            key-positions = <21 22>;
            bindings = <&kp SEMI>;
        };
        cccolon {
            timeout-ms = <DELAY_FAST>;
            key-positions = <20 22>;
            bindings = <&kp LS(SEMI)>;
        };
        cclbr {
            timeout-ms = <DELAY_FAST>;
            key-positions = <32 33>;
            bindings = <&kp LBRC>;
        };
        ccrbr {
            timeout-ms = <DELAY_FAST>;
            key-positions = <33 34>;
            bindings = <&kp RBRC>;
        };
        ccpipe {
            timeout-ms = <DELAY_FAST>;
            key-positions = <33 35>;
            bindings = <&kp LS(BSLH)>;
        };
        ccbslh {
            timeout-ms = <DELAY_FAST>;
            key-positions = <34 35>;
            bindings = <&kp BSLH>;
        };
        cclsfive{
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 19>;
            bindings = <&kp LS(N5)>;
        };
        cclssix {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 20>;
            bindings = <&kp LS(N6)>;
        };
        ccrepkey {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 32>;
            bindings = <&key_repeat>;
        };
        ccshret {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 22>;
            bindings = <&kp LS(RET)>;
        };
        ccautobkt {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 22>;
            bindings = <&zed_em_kay>;
        };
        ccshret {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 22>;
            bindings = <&kp LS(RET)>;
        };
        ccledq {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 11>;
            bindings = <&kp F12>;
        };
        cclbkt {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 32>;
            bindings = <&kp LBKT>;
        };
        ccrbkt {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 33>;
            bindings = <&kp RBKT>;
        };
        ccn7 {
            timeout-ms = <DELAY_FAST>;
            key-positions = <7 19>;
            bindings = <&kp LS(N7)>;
        };
        ccq {
            timeout-ms = <DELAY_FAST>;
            key-positions = <8 20>;
            bindings = <&kp Q>;
        };
        ccunsc {
            timeout-ms = <DELAY_FAST>;
            key-positions = <9 21>;
            bindings = <&kp LS(MINUS)>;
        };
        cctab {
            timeout-ms = <DELAY_FAST>;
            key-positions = <14 15>;
            bindings = <&kp TAB>;
        };
        ccgrave {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 7>;
            bindings = <&kp GRAVE>;
        };
        cclsgrave {
            timeout-ms = <DELAY_FAST>;
            key-positions = <42 8>;
            bindings = <&kp LS(GRAVE)>;
        };
        ccslsym {
            timeout-ms = <DELAY_FAST>;
            key-positions = <15 16>;
            bindings = <&sl SYM>;
        };
        ccnavspace {
            timeout-ms = <DELAY_FAST>;
            key-positions = <13 14>;
            bindings = <&kp LG(LS(SPACE))>;
        };
        ccnavj {
            timeout-ms = <DELAY_FAST>;
            key-positions = <13 15>;
            bindings = <&kp LG(LS(J))>;
        };
    };
    /* 

     0  1  2  3  4  5        6  7  8  9 10 11
    12 13 14 15 16 17       18 19 20 21 22 23
    24 25 26 27 28 29  30   31 32 33 34 35 36
             37 38 39 40 41 42 43 44 

te:
    */

  keymap {
          compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &lt FUNC ESC       &kp SQT      &kp COMMA  &kp DOT   &kp P         &kp Y                                          &kp F      &kp G     &kp C     &kp R      &kp L   &kp FSLH  
        &kp TAB            &kp A        &kp O      &kp E     &kp U         &kp I                                          &kp D      &kp H     &kp T     &kp N      &kp S   &kp MINUS 
        &sk LALT           &kp SEMI     &kp Q      &kp J     &kp K         &kp X        &kp C_PLAY_PAUSE                  &kp B      &kp M     &kp W     &kp V      &kp Z   &kp RET  
                                                   &mo MOUSE &sk LCTRL  &lt NAV SPACE &lt NUM SPACE        &kp BACKSPACE  &sk LSHFT  &sk LGUI  &none 
      >;
      sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
    };

    shift_layer {
      bindings = <
        &trans      &kp LS(SQT)      &kp LS(COMMA)  &kp LS(DOT)   &kp LS(P)         &kp LS(Y)                               &kp LS(F)      &kp LS(G)     &kp LS(C)     &kp LS(R)      &kp LS(L)          &kp LS(FSLH)  
        &to DEFAULT &kp LS(A)        &kp LS(O)      &kp LS(E)     &kp LS(U)         &kp LS(I)                               &kp LS(D)      &kp LS(H)     &kp LS(T)     &kp LS(N)      &kp LS(S)          &kp LS(MINUS) 
        &trans      &kp LS(SEMI)     &kp LS(Q)      &kp LS(J)     &kp LS(K)         &kp LS(X)        &to DEFAULT            &kp LS(B)      &kp LS(M)     &kp LS(W)     &kp LS(V)      &kp LS(Z)          &kp LS(RET)  
                                                    &none         &none             &kp SPACE      &kp RET   &kp LS(RET)    &trans       &trans        &trans
      >;
    };

    nav_layer {
      bindings = <
        &none         &kp LG(LA(LC(LS(F))))            &none                  &kp LALT                &kp LG(LA(LC(LS(N1))))  &none                                     &none          &kp PG_DN      &kp UP         &kp PG_UP   &kp RIGHT    xxx
        &none         &sk LSHFT                        &sk LCTRL              &sk LGUI                &kp LG(LA(LC(LS(N3))))  &kp LG(SPACE)                             &none          &kp LEFT       &kp DOWN       xxx         xxx          xxx
        &none         &none                            &kp LG(LA(LC(LS(N0)))) &kp LG(LA(LC(LS(N4))))  &kp LG(LA(LC(LS(N2))))  xxx             &kp LA(LC(SPACE))         &none          xxx            xxx            xxx         xxx          &kp LS(RET)
                                                                              &none                   xxx                     &trans       xxx           &td7           &kp RET        &none          &none
      >;
      sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
   };
    num_layer {
      bindings = <
        &none         &none          &none          &kp LALT    &none     &none                             &none              &kp N7         &none            &kp N8      &kp N9          &kp SPACE
        &none         &kp LSHFT      &kp LCTRL      &kp LGUI    &none     &none                             &kp BACKSPACE      &kp N1         &kp N2           &kp N3      &kp N4          &none
        &none         &none          &none          &none       &none     xxx             &kp C_MUTE        &none              &kp N0         &kp SPACE        &none       &none           &none
                                         &none           &none           &none       &trans       &kp N6    &kp N5             &none          &none  
       >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };
    function_layer {
      bindings = <
        xxx           &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                      &none         &kp F7         &kp F8      &kp F9      &kp F10         &none
        &none         &bt BT_CLR      &none           &out OUT_BLE    &out OUT_USB    &none                             &none         &kp F1         &kp F2      &kp F3      &kp F4          &none
        &bootloader   &reset          &none           &none           &none           &none              &to QWERTY     &none         &kp F11        &kp F12     &kp F13     &kp F14         &none
                                                      &none           &none           &none    &none     &kp F6        &kp F5         &kp F15      &none
      >;
    };

   qwerty_layer{
      bindings = <
        &kp ESC     &kp Q     &kp W       &kp E     &kp R           &kp T                                &kp Y     &kp U     &kp I      &kp O    &kp P     &kp BACKSPACE
        &kp TAB     &kp A     &kp S       &kp D     &kp F           &kp G                                &kp H     &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
        &kp LSHFT   &kp Z     &kp X       &kp C     &kp V           &kp B            &to DEFAULT         &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &mt RSHFT RET
                                          &none     &none           &kp SPACE   &kp SPACE    &kp SPACE   &kp SPACE &none     &none
      >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };
    mouse_layer{
      bindings = <
        &none         &none          &none          &none       &none     &none                         &none         &none          &mmv MOVE_UP   &none           &none                &none     
        &none         &none          &none          &mkp RCLK   &mkp LCLK &none                         &none         &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none                &none     
        &none         &none          &none          &none       &none     &none       &mkp LCLK         &none         &none          &none          &none           &none                &mkp LCLK 
                                                 &none          &none     &none     &none      &none    &mkp LCLK     &mkp RCLK      &none
      >;
    };

    sym_layer{
      bindings = <
        &none         &none          &none          &sk LALT    &none         &none                              &none            &kp LS(N7)     xxx              &kp LS(N8)  &none           &kp BSLH                     
        &none         &sk LSHFT      &sk LCTRL      &sk LGUI    &none         &none                              &kp BACKSPACE    &kp LS(N1)     &kp LS(N2)       &kp LS(N3)  &kp LS(N4)      &none                        
        &sk LALT      &none          &none          &none       &none         &none       &none                  &kp PLUS         &kp MINUS      &kp LS(MINUS)    &none       &none           &none                        
                                                 &none          &sk LCTRL     &to DEFAULT   &none   &kp LS(N6)   &kp LS(N5)       &sk LGUI       &none
      >;
    };
    /* 

    mouse movement using encoder

    */
        };
};
