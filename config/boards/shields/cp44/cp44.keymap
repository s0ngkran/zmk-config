/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT

    jump_layer{
      bindings = <
        xxx         xxx          xxx          xxx       xxx     xxx                         xxx         xxx         xxx         xxx         xxx       xxx
        xxx         xxx          xxx          xxx       xxx     xxx                         xxx         xxx         xxx         xxx         xxx       xxx
        xxx         xxx          xxx          xxx       xxx     xxx          xxx            xxx         xxx         xxx         xxx         xxx       xxx
                                              xxx       xxx     xxx     xxx     xxx         xxx         xxx         xxx
      >;
    };
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SHIFT 1
#define NAV 2
#define NUM 3
#define FUNC 4
#define QWERTY 5
#define MOUSE 6
#define SYM 7
#define DEFAULT_WINDOW 8
#define UBUNTU 9
#define SHIFT_UBUNTU 10
#define NAV_UBUNTU 11
#define SYM_UBUNTU 12
#define SNIPPET 13

#define DELAY_FAST 25
#define DELAY_SLOW 30

#define DEFAULT_LAYERS DEFAULT DEFAULT_WINDOW NUM SYM UBUNTU SYM_UBUNTU 
#define NAV_LAYERS NAV NAV_UBUNTU

#define U_MOUSE_MOVE_MAX 2700                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
	time-to-max-speed-ms = <500>;             /* <--- How long time until max speed is reached (default: 500) */
};

#define U_MOUSE_SCROLL_MAX 100                    /* <--- New max speed setting (default: 10) */

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)
#define xxx &none

#define GO_VSCODE &kp LG(LA(LC(LS(N1))))
#define GO_ITERM  &kp LG(LA(LC(LS(N3))))
#define GO_SAFARI &kp LG(LA(LC(LS(N2))))
#define GO_DISCORD &kp LG(LA(LC(LS(N4))))
#define GO_OBSIDIAN &kp LG(LA(LC(LS(N0))))
#define GO_FINDER &kp LG(LA(LC(LS(F))))
#define GO_TOGGLE &kp LG(LA(LC(LS(N5))))
#define GO_HOMEROW &kp LG(LS(SPACE))
#define GO_RAYCAST &kp LG(SPACE)
#define COPY &kp LG(C)
#define PASTE &kp LG(V)
#define KILL_WINDOW &kp LG(W)
#define UNDO &kp LG(Z)

#define UB_GO_VSCODE &kp LG(N4)
#define UB_GO_ITERM  &kp LG(N1)
#define UB_GO_CHROME &kp LG(N2)
#define UB_GO_DISCORD &kp LG(N3)
#define UB_GO_OBSIDIAN &kp LG(N5)
#define UB_GO_FINDER &kp LG(N6) 
#define UB_GO_TOGGLE &kp LG(N7)
#define UB_GO_HOMEROW &kp LG(LS(SPACE))
#define UB_GO_RAYCAST &kp LG(SPACE)
#define UB_COPY &kp LC(C)
#define UB_PASTE &kp LC(V)
#define UB_KILL_WINDOW &kp LC(W)
#define UB_UNDO &kp LC(Z)

#define C_LANG &kp LA(LC(SPACE))

&mwh {
 time-to-max-speed-ms = <500>;                 /* <--- How long time until max speed is reached */
};


&mt {
    tapping-term-ms = <75>;
};

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after ms
    quick-release;             // no double capitalization when rolling keys
};


/ {
    macros {
        zed_em_kay: zed_em_kay {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp LPAR &kp RPAR &kp LBRC &kp RBRC>;
        };
        disc_mic: disc_mic {
            label = "disc_mic";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings
                = <GO_DISCORD>
                , <&kp LG(LS(M))>
                , <GO_DISCORD>
                ;
        };
        snphone: snphone {
            label = "snphone";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp N0 &kp N8 &kp N0 &kp N9 &kp N0 &kp N7 &kp N0 &kp N1 &kp N1 &kp N7>;
        };
        snemail: snemail {
            label = "snemail";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp J &kp I &kp N &kp N &kp A &kp W &kp A &kp T &kp N8 &kp LS(N2) &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };
    };
  behaviors {
         td0: tap_dance {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_0";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp SEMI>, <&kp LS(SEMI)>;
                };
         td1: tap_dancee {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_1";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp EQUAL>, <&kp PLUS>;
                };
         td2: tap_dancee2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_2";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LPAR>, <&kp RPAR>;
                };
         td3: tap_dancee3 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_3";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp F8>, <&kp LC(N1)>;
                };
         td4: tap_dancee4 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_4";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp F12>, <&kp Q>;
                };
         td5: tap_dancee5 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_5";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LBRC>, <&kp RBRC>;
                };
         td6: tap_dancee6 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_6";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LBKT>, <&kp RBKT>;
                };
 td7: tap_dancee7 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_7";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LG(LA(LC(LS(N7))))>, <&kp LG(LA(LC(LS(N8))))>,<&kp LG(LA(LC(LS(N9))))>;
                };
         tdshiftspace: tdshiftspace {
                    compatible = "zmk,behavior-tap-dance";
                    label = "tdshiftspace";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&sk LSHFT>, <&kp SPACE>;
                                                                     
                };
    };

combos {
        compatible = "zmk,combos";
        ccplus {
            timeout-ms = <DELAY_FAST>;
            key-positions = <7 8>;
            bindings = <&kp PLUS>;
            layers = <DEFAULT_LAYERS>;
        };
        ccmulti {
            timeout-ms = <DELAY_FAST>;
            key-positions = <7 9>;
            bindings = <&kp LS(N8)>;
            layers = <DEFAULT_LAYERS>;
        };
        ccminus {
            timeout-ms = <DELAY_FAST>;
            key-positions = <9 8>;
            bindings = <&kp MINUS>;
            layers = <DEFAULT_LAYERS>;
        };
        ccminusup {
            timeout-ms = <DELAY_FAST>;
            key-positions = <9 8>;
            bindings = <&kp LS(MINUS)>;
            layers = <NAV_LAYERS>;
        };
        cclpar {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 20>;
            bindings = <&kp LS(N9)>;
            layers = <DEFAULT_LAYERS>;
        };
        cclparupkt {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 20>;
            bindings = <&kp LBRC>;
            layers = <NAV_LAYERS>;
        };
        ccequal {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 21>;
            bindings = <&kp EQUAL>;
            layers = <DEFAULT_LAYERS>;
        };
        ccequalup {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 21>;
            bindings = <&kp PLUS>;
            layers = <NAV_LAYERS>;
        };
        ccrpar {
            timeout-ms = <DELAY_FAST>;
            key-positions = <20 21>;
            bindings = <&kp LS(N0)>;
            layers = <DEFAULT_LAYERS>;
        };
        ccrparup {
            timeout-ms = <DELAY_FAST>;
            key-positions = <20 21>;
            bindings = <&kp RBRC>;
            layers = <NAV_LAYERS>;
        };
        ccsemi {
            timeout-ms = <DELAY_FAST>;
            key-positions = <32 33>;
            bindings = <&kp SEMI>;
            layers = <DEFAULT_LAYERS>;
        };
        cccolon {
            timeout-ms = <DELAY_FAST>;
            key-positions = <32 33>;
            bindings = <&kp LS(SEMI)>;
            layers = <NAV_LAYERS>;
        };
        cclbktnav {
            timeout-ms = <DELAY_SLOW>;
            key-positions = <18 20>;
            bindings = <&kp LBKT>;
            layers = <NAV_LAYERS>;
        };
        ccrbktnav {
            timeout-ms = <DELAY_SLOW>;
            key-positions = <20 22>;
            bindings = <&kp RBKT>;
            layers = <NAV_LAYERS>;
        };
        ccbslash {
            timeout-ms = <DELAY_SLOW>;
            key-positions = <19 22>;
            bindings = <&kp BSLH>;
            layers = <DEFAULT_LAYERS>;
        };
        ccpipe {
            timeout-ms = <DELAY_SLOW>;
            key-positions = <19 22>;
            bindings = <&kp LS(BSLH)>;
            layers = <NAV_LAYERS>;
        };
        ccgrave {
            timeout-ms = <DELAY_FAST>;
            key-positions = <33 34>;
            bindings = <&kp GRAVE>;
            layers = <DEFAULT_LAYERS>;
        };
        ccgravels {
            timeout-ms = <DELAY_FAST>;
            key-positions = <33 34>;
            bindings = <&kp LS(GRAVE)>;
            layers = <NAV_LAYERS>;
        };
        ccrepkey {
            timeout-ms = <DELAY_FAST>;
            key-positions = <32 34>;
            bindings = <&key_repeat>;
            layers = <DEFAULT_LAYERS>;
        };
        ccautobkt {
            timeout-ms = <DELAY_FAST>;
            key-positions = <19 9>;
            bindings = <&zed_em_kay>;
            layers = <DEFAULT_LAYERS>;
        };
        ccslsym {
            timeout-ms = <DELAY_FAST>;
            key-positions = <15 16>;
            bindings = <&sl SYM>;
            layers = <NAV>;
        };
        ccslsymub {
            timeout-ms = <DELAY_FAST>;
            key-positions = <15 16>;
            bindings = <&sl SYM_UBUNTU>;
            layers = <NAV_UBUNTU>;
        };
        ccnavj {
            timeout-ms = <DELAY_SLOW>;
            key-positions = <27 39>;
            bindings = <&kp LG(LS(J))>;
            layers = <DEFAULT_LAYERS>;
        };
    };
    /* 
                        

     0  1  2  3  4  5        6  7  8  9 10 11
    12 13 14 15 16 17       18 19 20 21 22 23
    24 25 26 27 28 29  30   31 32 33 34 35 36
             37 38 39 40 41 42 43 44 


             todo 
             add toggle floating note

    */

  keymap {
          compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &lt FUNC ESC       &kp SQT      &kp COMMA  &kp DOT   &kp P         &kp Y                                          &kp F      &kp G     &kp C     &kp R      &kp L   &kp FSLH  
        &kp TAB            &kp A        &kp O      &kp E     &kp U         &kp I                                          &kp D      &kp H     &kp T     &kp N      &kp S   &kp MINUS 
        &kp LALT           &kp SEMI     &kp Q      &kp J     &kp K         &kp X        &kp C_PLAY_PAUSE                  &kp B      &kp M     &kp W     &kp V      &kp Z   &kp RET  
                                                   &mo MOUSE &kp LCTRL  &lt NAV SPACE &lt NUM LS(BACKSPACE)  &kp BACKSPACE  &sk LSHFT  &kp LGUI  &kp C_PLAY_PAUSE 
      >;
      sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
    };

    shift_layer {
      bindings = <
        &to DEFAULT &kp LS(SQT)      &kp LS(COMMA)  &kp LS(DOT)   &kp LS(P)         &kp LS(Y)                                           &kp LS(F)      &kp LS(G)     &kp LS(C)     &kp LS(R)      &kp LS(L)          &kp LS(FSLH)  
        xxx         &kp LS(A)        &kp LS(O)      &kp LS(E)     &kp LS(U)         &kp LS(I)                                           &kp LS(D)      &kp LS(H)     &kp LS(T)     &kp LS(N)      &kp LS(S)          &kp LS(MINUS) 
        &kp LALT    &kp LS(SEMI)     &kp LS(Q)      &kp LS(J)     &kp LS(K)         &kp LS(X)        &to DEFAULT                        &kp LS(B)      &kp LS(M)     &kp LS(W)     &kp LS(V)      &kp LS(Z)          &kp RET  
                                                    xxx           &kp LCTRL         &kp SPACE    &lt NUM LS(BACKSPACE)   &kp BACKSPACE  &sk LSHFT      &kp LGUI      &kp C_PLAY_PAUSE
      >;
    };

    nav_layer {
      bindings = <
        &to SHIFT           GO_FINDER       GO_TOGGLE          &kp LALT        GO_VSCODE         xxx                                  xxx          &kp PG_DN      &kp UP         &kp PG_UP   &kp RIGHT    &td7
        xxx                 &kp LSHFT       &kp LCTRL          &kp LGUI        GO_ITERM          GO_OBSIDIAN                          xxx          &kp LEFT       &kp DOWN       &kp RIGHT   &kp TAB      xxx
        xxx                 xxx             xxx                GO_DISCORD      GO_SAFARI         xxx             C_LANG               xxx          COPY           KILL_WINDOW     PASTE       UNDO         &kp LS(RET)
                                                               C_LANG          xxx               xxx      SNIPPET        GO_HOMEROW   GO_RAYCAST   &disc_mic       xxx
      >;
      sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
   };
    num_layer {
      bindings = <
        xxx         xxx          xxx          &kp LALT    xxx         xxx                             xxx       &kp N7         &kp DOT     &kp N8      &kp N9      &kp BACKSPACE
        xxx         &kp LSHFT    &kp LCTRL    &kp LGUI    &kp SPACE   xxx                             xxx       &kp N1         &kp N2      &kp N3      &kp N4      xxx
        xxx         xxx          xxx          xxx         xxx         xxx       xxx                   xxx       &kp N0         xxx         xxx         xxx         &kp RET
                                              xxx         xxx         SNIPPET   xxx     &kp N6     &kp N5    xxx            xxx  
       >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };
    function_layer {
      bindings = <
        xxx                  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                    &tog DEFAULT_WINDOW    &kp F7         &kp F8      &kp F9      &kp F10         &to DEFAULT
        C_LANG               &bt BT_CLR      xxx             &out OUT_BLE    &out OUT_USB    xxx                             &tog UBUNTU            &kp F1         &kp F2      &kp F3      &kp F4          xxx
        &bootloader          &reset          xxx             xxx             xxx             xxx              &to QWERTY     xxx                    &kp F11        &kp F12     &kp F13     &kp F14         xxx
                                                             xxx             xxx             xxx         xxx     &kp F6      &kp F5                 &kp F15        xxx
      >;
    };

   qwerty_layer{
      bindings = <
        &kp ESC     &kp Q     &kp W       &kp E     &kp R           &kp T                                &kp Y     &kp U     &kp I      &kp O    &kp P     &kp BACKSPACE
        &kp TAB     &kp A     &kp S       &kp D     &kp F           &kp G                                &kp H     &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
        &kp LSHFT   &kp Z     &kp X       &kp C     &kp V           &kp B            &to DEFAULT         &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &mt RSHFT RET
                                          xxx     xxx           &kp SPACE   &kp SPACE    &kp SPACE   &kp SPACE xxx     xxx
      >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };
    mouse_layer{
      bindings = <
        xxx         xxx          xxx          xxx         xxx       xxx                         xxx         xxx            &mmv MOVE_UP   xxx             xxx                xxx     
        xxx         xxx          xxx          &mkp RCLK   &mkp LCLK xxx                         xxx         &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT xxx                xxx     
        xxx         xxx          xxx          xxx         xxx       xxx       &mkp LCLK         xxx         xxx            xxx            xxx             xxx                &mkp LCLK 
                                                 xxx          xxx     xxx     xxx      xxx    &mkp LCLK     &mkp RCLK      xxx
      >;
    };

    sym_layer{
      bindings = <
        xxx         xxx          xxx          xxx         xxx       xxx                              xxx              &kp LS(N7)     xxx              &kp LS(N8)  xxx           &kp BSLH                     
        xxx         xxx          xxx          xxx         xxx       xxx                              xxx              &kp LS(N1)     &kp LS(N2)       &kp LS(N3)  &kp LS(N4)    xxx                        
        xxx         xxx          xxx          xxx         xxx       xxx             xxx              xxx              xxx            xxx              xxx         xxx           xxx                        
                                              xxx         &kp LCTRL &to DEFAULT   xxx   &kp LS(N6)   &kp LS(N5)       &kp LGUI       xxx
      >;
    };

    default_window_layer {
      bindings = <
        &lt FUNC ESC       &kp SQT      &kp COMMA  &kp DOT   &kp P         &kp Y                                          &kp F      &kp G     &kp C     &kp R      &kp L   &kp FSLH  
        &kp TAB            &kp A        &kp O      &kp E     &kp U         &kp I                                          &kp D      &kp H     &kp T     &kp N      &kp S   &kp MINUS 
        &kp LALT           &kp SEMI     &kp Q      &kp J     &kp K         &kp X        &kp C_PLAY_PAUSE                  &kp B      &kp M     &kp W     &kp V      &kp Z   &kp RET  
                                                   &mo MOUSE &kp LGUI  &lt NAV SPACE &lt NUM LS(BACKSPACE)  &kp BACKSPACE &sk LSHFT  &kp LCTRL &kp C_PLAY_PAUSE 
      >;
      sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
    };

    ubuntu_layer {
      bindings = <
        &lt FUNC ESC       &kp SQT      &kp COMMA  &kp DOT   &kp P         &kp Y                                          &kp F      &kp G     &kp C     &kp R      &kp L   &kp FSLH  
        &kp TAB            &kp A        &kp O      &kp E     &kp U         &kp I                                          &kp D      &kp H     &kp T     &kp N      &kp S   &kp MINUS 
        &kp LALT           &kp SEMI     &kp Q      &kp J     &kp K         &kp X        &kp C_PLAY_PAUSE                  &kp B      &kp M     &kp W     &kp V      &kp Z   &kp RET  
                                                   &mo MOUSE &kp LCTRL  &lt NAV_UBUNTU SPACE &lt NUM LS(BACKSPACE)  &kp BACKSPACE  &sk LSHFT  &kp LGUI  &kp C_PLAY_PAUSE 
      >;
      sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
    };

    ubuntu_shift_layer {
      bindings = <
        &to UBUNTU  &kp LS(SQT)      &kp LS(COMMA)  &kp LS(DOT)   &kp LS(P)         &kp LS(Y)                                           &kp LS(F)      &kp LS(G)     &kp LS(C)     &kp LS(R)      &kp LS(L)          &kp LS(FSLH)  
        xxx         &kp LS(A)        &kp LS(O)      &kp LS(E)     &kp LS(U)         &kp LS(I)                                           &kp LS(D)      &kp LS(H)     &kp LS(T)     &kp LS(N)      &kp LS(S)          &kp LS(MINUS) 
        &kp LALT    &kp LS(SEMI)     &kp LS(Q)      &kp LS(J)     &kp LS(K)         &kp LS(X)        &to UBUNTU                         &kp LS(B)      &kp LS(M)     &kp LS(W)     &kp LS(V)      &kp LS(Z)          &kp RET  
                                                    xxx           &kp LCTRL         &kp SPACE    &lt NUM LS(BACKSPACE)   &kp BACKSPACE  &sk LSHFT      &kp LGUI      &kp C_PLAY_PAUSE
      >;
    };

    nav_ubuntu_layer {
      bindings = <
        &to SHIFT_UBUNTU    UB_GO_FINDER    UB_GO_TOGGLE       &kp LALT        UB_GO_VSCODE         xxx                                       xxx             &kp PG_DN      &kp UP           &kp PG_UP   &kp RIGHT    &td7
        xxx                 &kp LSHFT       &kp LCTRL          &kp LGUI        UB_GO_ITERM          UB_GO_OBSIDIAN                            xxx             &kp LEFT       &kp DOWN         &kp RIGHT   &kp TAB      xxx
        xxx                 xxx             xxx                UB_GO_DISCORD   UB_GO_CHROME         xxx                xxx                    xxx             UB_COPY        UB_KILL_WINDOW   UB_PASTE    UB_UNDO      &kp LS(RET)
                                                               xxx             xxx                  SNIPPET    &to UBUNTU     UB_GO_HOMEROW   UB_GO_RAYCAST   &disc_mic      xxx
      >;
      sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
   };

    sym_ubuntu_layer{
      bindings = <
        xxx         xxx          xxx          xxx         xxx       xxx                              xxx              &kp LS(N7)     xxx              &kp LS(N8)  xxx           &kp BSLH                     
        xxx         xxx          xxx          xxx         xxx       xxx                              xxx              &kp LS(N1)     &kp LS(N2)       &kp LS(N3)  &kp LS(N4)    xxx                        
        xxx         xxx          xxx          xxx         xxx       xxx             xxx              xxx              xxx            xxx              xxx         xxx           xxx                        
                                              xxx         &kp LCTRL &to UBUNTU   xxx   &kp LS(N6)   &kp LS(N5)       &kp LGUI       xxx
      >;
    };
    
    snippet_layer{
      bindings = <
        xxx         xxx          xxx          xxx       xxx     xxx                         xxx         xxx         xxx         xxx         xxx       xxx
        xxx         xxx          xxx          xxx       xxx     xxx                         xxx         &snphone    &snemail    xxx         xxx       xxx
        xxx         xxx          xxx          xxx       xxx     xxx          xxx            xxx         xxx         xxx         xxx         xxx       xxx
                                              xxx       xxx     xxx     xxx     xxx         xxx         xxx         xxx
      >;
    };

    /* 

    add macro leader q to nav_q
    snippet
    nav

    */
        };
};
